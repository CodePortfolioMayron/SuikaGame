//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/GAME/Script/Android Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @AndroidInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @AndroidInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Android Input"",
    ""maps"": [
        {
            ""name"": ""Move"",
            ""id"": ""d927be84-0df6-45b3-8474-319640f1500f"",
            ""actions"": [
                {
                    ""name"": ""touchpress"",
                    ""type"": ""PassThrough"",
                    ""id"": ""da467700-acd8-4dee-93f9-dd1b59b22e29"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""pressrelease"",
                    ""type"": ""Value"",
                    ""id"": ""10a7f80e-874f-4227-88e9-dd3abc0cd5e1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2e9b5e29-5fdc-48fe-b026-8c134ff602a1"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""touchpress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""da1c4729-c846-4250-b722-0fd8a3ddf050"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""pressrelease"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Move
        m_Move = asset.FindActionMap("Move", throwIfNotFound: true);
        m_Move_touchpress = m_Move.FindAction("touchpress", throwIfNotFound: true);
        m_Move_pressrelease = m_Move.FindAction("pressrelease", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Move
    private readonly InputActionMap m_Move;
    private List<IMoveActions> m_MoveActionsCallbackInterfaces = new List<IMoveActions>();
    private readonly InputAction m_Move_touchpress;
    private readonly InputAction m_Move_pressrelease;
    public struct MoveActions
    {
        private @AndroidInput m_Wrapper;
        public MoveActions(@AndroidInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @touchpress => m_Wrapper.m_Move_touchpress;
        public InputAction @pressrelease => m_Wrapper.m_Move_pressrelease;
        public InputActionMap Get() { return m_Wrapper.m_Move; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MoveActions set) { return set.Get(); }
        public void AddCallbacks(IMoveActions instance)
        {
            if (instance == null || m_Wrapper.m_MoveActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MoveActionsCallbackInterfaces.Add(instance);
            @touchpress.started += instance.OnTouchpress;
            @touchpress.performed += instance.OnTouchpress;
            @touchpress.canceled += instance.OnTouchpress;
            @pressrelease.started += instance.OnPressrelease;
            @pressrelease.performed += instance.OnPressrelease;
            @pressrelease.canceled += instance.OnPressrelease;
        }

        private void UnregisterCallbacks(IMoveActions instance)
        {
            @touchpress.started -= instance.OnTouchpress;
            @touchpress.performed -= instance.OnTouchpress;
            @touchpress.canceled -= instance.OnTouchpress;
            @pressrelease.started -= instance.OnPressrelease;
            @pressrelease.performed -= instance.OnPressrelease;
            @pressrelease.canceled -= instance.OnPressrelease;
        }

        public void RemoveCallbacks(IMoveActions instance)
        {
            if (m_Wrapper.m_MoveActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMoveActions instance)
        {
            foreach (var item in m_Wrapper.m_MoveActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MoveActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MoveActions @Move => new MoveActions(this);
    public interface IMoveActions
    {
        void OnTouchpress(InputAction.CallbackContext context);
        void OnPressrelease(InputAction.CallbackContext context);
    }
}
